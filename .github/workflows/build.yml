name: Build
on:
  workflow_dispatch: {}
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: windows
          os: windows-2019
          rust: nightly-x86_64-msvc
          target: x86_64-pc-windows-msvc
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Build binary
      run: cargo build --verbose --release --target ${{ matrix.target }}
      env:
        RUST_BACKTRACE: 1

    - name: Strip binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/markovpass"

    - name: Build archive
      id: build_archive
      shell: bash
      run: |
        version="$(cargo metadata --format-version 1 | jq -r '[.packages[]|select(.name=="markovpass")][0].version')"
        mkdir archive
        cp LICENSE README.md archive/
        cd archive
        if [ "${{ matrix.build }}" = "windows" ]; then
          cp "../target/${{ matrix.target }}/release/markovpass.exe" ./
          name="markovpass-$version-${{ matrix.target }}.7z"
          7z a "$name" LICENSE README.md markovpass.exe
        else
          cp "../target/${{ matrix.target }}/release/markovpass" ./
          name="markovpass-$version-${{ matrix.target }}.tar.gz"
          tar -czf "$name" LICENSE README.md markovpass
        fi
        echo "::set-output name=name::$name"

    - name: Upload archive
      uses: actions/upload-artifact@v1
      with:
        name: ${{ steps.build_archive.outputs.name }}
        path: archive/${{ steps.build_archive.outputs.name }}
  make_deb:
    name: Make .deb
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
        override: true

    - name: Build .deb
      id: deb
      run: |
        cargo install cargo-deb
        deb_file=$(cargo deb)
        echo "::set-output name=name::$(basename $deb_file)"

    - name: Upload .deb
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.deb.outputs.name }}
        path: target/debian/${{ steps.deb.outputs.name }}
